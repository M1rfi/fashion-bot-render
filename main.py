import os
import json
import numpy as np
from PIL import Image
import torch
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from sentence_transformers import SentenceTransformer
import logging

# –û—Ç–∫–ª—é—á–∞–µ–º GPU, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –ø–∞–º—è—Ç—å –ø–æ–¥ cuda
os.environ["CUDA_VISIBLE_DEVICES"] = ""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TOKEN')
DB_FILE = "wardrobe_db.json"
IMG_DIR = "temp_images"
os.makedirs(IMG_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
model = SentenceTransformer('clip-ViT-B-32')

def load_db():
    try:
        if os.path.exists(DB_FILE):
            with open(DB_FILE, 'r') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")
    return {"items": []}

def save_db(db):
    try:
        with open(DB_FILE, 'w') as f:
            json.dump(db, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(
            "üëó *–ì–∞—Ä–¥–µ—Ä–æ–± –ë–æ—Ç* v2.0\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤–µ—â–∏ - —è —Å–æ—Ö—Ä–∞–Ω—é –µ—ë\n"
            "2. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä. '–≤–µ—á–µ—Ä–Ω–∏–π –æ–±—Ä–∞–∑') –∏–ª–∏ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å\n"
            "3. –ö–æ–º–∞–Ω–¥—ã:\n"
            "   /look - —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑\n"
            "   /random - —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—Ä–∞–∑\n"
            "   /wardrobe - –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—â–∏\n"
            "   /remove ID - —É–¥–∞–ª–∏—Ç—å –≤–µ—â—å",
            parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def save_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        item_id = str(photo.file_id)
        filename = f"{IMG_DIR}/{item_id}.jpg"

        await file.download_to_drive(filename)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        img = Image.open(filename).convert('RGB')
        img = img.resize((224, 224))

        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        img_emb = model.encode(img)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float16 –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        img_emb_16 = img_emb.astype(np.float16)

        db = load_db()
        db["items"].append({
            "id": item_id,
            "file_path": filename,
            "embedding": img_emb_16.tolist(),
            "type": "clothes"
        })
        save_db(db)

        await update.message.reply_text(f"‚úÖ –í–µ—â—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—Å–µ–≥–æ: {len(db['items'])}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_item: {e}")

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –æ—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
async def generate_look(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass

async def random_look(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass

async def show_wardrobe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass

async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass

async def handle_reference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass

def main():
    try:
        app = ApplicationBuilder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("look", generate_look))
        app.add_handler(CommandHandler("random", random_look))
        app.add_handler(CommandHandler("wardrobe", show_wardrobe))
        app.add_handler(CommandHandler("remove", remove_item))
        app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, save_item))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reference))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        app.run_polling()
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
