import os
import json
import numpy as np
from io import BytesIO
from PIL import Image
import torch
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from sentence_transformers import SentenceTransformer
import logging
import gc

# –û—Ç–∫–ª—é—á–∞–µ–º GPU –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PyTorch –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
os.environ["CUDA_VISIBLE_DEVICES"] = ""
torch.set_num_threads(1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TOKEN')
DB_FILE = "wardrobe_db.json"
IMG_DIR = "temp_images"
os.makedirs(IMG_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏
model = None

def load_model():
    global model
    if model is None:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        model = SentenceTransformer('clip-ViT-B-32', device='cpu')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ —Ä–µ–∂–∏–º eval –∏ half-precision
        model = model.eval()
        for param in model.parameters():
            param.requires_grad = False
    return model

def load_db():
    try:
        if os.path.exists(DB_FILE):
            with open(DB_FILE, 'r') as f:
                db = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ numpy array –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                for item in db.get("items", []):
                    if "embedding" in item:
                        item["embedding"] = np.array(item["embedding"], dtype=np.float16)
                return db
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")
    return {"items": []}

def save_db(db):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –±–µ–∑ numpy –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        db_copy = {"items": []}
        for item in db.get("items", []):
            item_copy = item.copy()
            if "embedding" in item_copy:
                item_copy["embedding"] = item_copy["embedding"].tolist()
            db_copy["items"].append(item_copy)
        
        with open(DB_FILE, 'w') as f:
            json.dump(db_copy, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")

async def cleanup_memory():
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
    gc.collect()
    if torch.cuda.is_available():
        torch.cuda.empty_cache()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(
            "üëó *–ì–∞—Ä–¥–µ—Ä–æ–± –ë–æ—Ç* v2.0\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤–µ—â–∏ - —è —Å–æ—Ö—Ä–∞–Ω—é –µ—ë\n"
            "2. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä. '–≤–µ—á–µ—Ä–Ω–∏–π –æ–±—Ä–∞–∑') –∏–ª–∏ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å\n"
            "3. –ö–æ–º–∞–Ω–¥—ã:\n"
            "   /look - —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑\n"
            "   /random - —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—Ä–∞–∑\n"
            "   /wardrobe - –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—â–∏\n"
            "   /remove ID - —É–¥–∞–ª–∏—Ç—å –≤–µ—â—å",
            parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def save_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        model = load_model()
        
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file = await photo.get_file()
        item_id = str(photo.file_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫
        image_bytes = await file.download_as_bytearray()
        img = Image.open(BytesIO(image_bytes)).convert('RGB')
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        img = img.resize((224, 224))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        with torch.no_grad():
            img_emb = model.encode(img, convert_to_tensor=False)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float16 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        img_emb = img_emb.astype(np.float16)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = load_db()
        db["items"].append({
            "id": item_id,
            "file_path": f"{IMG_DIR}/{item_id}.jpg",  # –ü—É—Ç—å, –Ω–æ —Ñ–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            "embedding": img_emb,
            "type": "clothes"
        })
        save_db(db)
        
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        del img, img_emb, image_bytes
        await cleanup_memory()
        
        await update.message.reply_text(f"‚úÖ –í–µ—â—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—Å–µ–≥–æ: {len(db['items'])}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_item: {e}")

async def generate_look(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        model = load_model()
        db = load_db()
        
        if not db["items"]:
            await update.message.reply_text("–í –≥–∞—Ä–¥–µ—Ä–æ–±–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π!")
            return
        
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
        items = np.random.choice(db["items"], size=min(3, len(db["items"])), replace=False)
        
        response = "üëó *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ–±—Ä–∞–∑:*\n"
        for i, item in enumerate(items, 1):
            response += f"{i}. –í–µ—â—å ID: {item['id']}\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_look: {e}")
    finally:
        await cleanup_memory()

async def random_look(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await generate_look(update, context)

async def show_wardrobe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        db = load_db()
        
        if not db["items"]:
            await update.message.reply_text("–í–∞—à –≥–∞—Ä–¥–µ—Ä–æ–± –ø—É—Å—Ç!")
            return
        
        response = "üëö *–í–∞—à –≥–∞—Ä–¥–µ—Ä–æ–±:*\n"
        for i, item in enumerate(db["items"], 1):
            response += f"{i}. ID: {item['id']}\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_wardrobe: {e}")

async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –≤–µ—â–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove ID")
            return
        
        item_id = context.args[0]
        db = load_db()
        
        initial_count = len(db["items"])
        db["items"] = [item for item in db["items"] if item["id"] != item_id]
        
        if len(db["items"]) < initial_count:
            save_db(db)
            await update.message.reply_text(f"‚úÖ –í–µ—â—å {item_id} —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text(f"‚ùå –í–µ—â—å —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_item: {e}")

async def handle_reference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text_query = update.message.text
        if not text_query:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
        
        model = load_model()
        db = load_db()
        
        if not db["items"]:
            await update.message.reply_text("–í –≥–∞—Ä–¥–µ—Ä–æ–±–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π!")
            return
        
        # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        with torch.no_grad():
            query_embedding = model.encode(text_query, convert_to_tensor=False)
        query_embedding = query_embedding.astype(np.float16)
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –≤–µ—â–∏
        similarities = []
        for item in db["items"]:
            if "embedding" in item:
                emb = item["embedding"]
                sim = np.dot(query_embedding, emb) / (np.linalg.norm(query_embedding) * np.linalg.norm(emb))
                similarities.append((sim, item))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–¥—Å—Ç–≤–∞
        similarities.sort(reverse=True, key=lambda x: x[0])
        top_items = [item for (sim, item) in similarities[:3]]
        
        if not top_items:
            await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–µ—â–µ–π")
            return
        
        response = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text_query}':*\n"
        for i, item in enumerate(top_items, 1):
            response += f"{i}. –í–µ—â—å ID: {item['id']} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {similarities[i-1][0]:.2f})\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reference: {e}")
    finally:
        await cleanup_memory()

def main():
    try:
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        load_model()
        
        app = ApplicationBuilder().token(TOKEN).build()
        
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("look", generate_look))
        app.add_handler(CommandHandler("random", random_look))
        app.add_handler(CommandHandler("wardrobe", show_wardrobe))
        app.add_handler(CommandHandler("remove", remove_item))
        app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, save_item))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reference))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        app.run_polling()
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
