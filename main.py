import os
import json
import random
from io import BytesIO
from PIL import Image
import torch
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from sentence_transformers import SentenceTransformer, util
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TOKEN')  # –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DB_FILE = "wardrobe_db.json"
IMG_DIR = "temp_images"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs(IMG_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
model = SentenceTransformer('all-MiniLM-L6-v2')

def load_db():
    try:
        if os.path.exists(DB_FILE):
            with open(DB_FILE, 'r') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")
    return {"items": []}

def save_db(db):
    try:
        with open(DB_FILE, 'w') as f:
            json.dump(db, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(
            "üëó *–ì–∞—Ä–¥–µ—Ä–æ–± –ë–æ—Ç* v2.0\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤–µ—â–∏ - —è —Å–æ—Ö—Ä–∞–Ω—é –µ—ë\n"
            "2. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä. '–≤–µ—á–µ—Ä–Ω–∏–π –æ–±—Ä–∞–∑') –∏–ª–∏ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å\n"
            "3. –ö–æ–º–∞–Ω–¥—ã:\n"
            "   /look - —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑\n"
            "   /random - —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—Ä–∞–∑\n"
            "   /wardrobe - –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—â–∏\n"
            "   /remove ID - —É–¥–∞–ª–∏—Ç—å –≤–µ—â—å",
            parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def save_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        item_id = str(photo.file_id)
        filename = f"{IMG_DIR}/{item_id}.jpg"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        await file.download_to_drive(filename)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        img = Image.open(filename)
        img_emb = model.encode(img)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db = load_db()
        db["items"].append({
            "id": item_id,
            "file_path": filename,
            "embedding": img_emb.tolist(),
            "type": "clothes"
        })
        save_db(db)
        
        await update.message.reply_text(f"‚úÖ –í–µ—â—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—Å–µ–≥–æ: {len(db['items'])}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_item: {e}")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle_reference, generate_look, random_look –∏ —Ç.–¥. –æ—Å—Ç–∞–≤—å—Ç–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def main():
    try:
        app = ApplicationBuilder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("look", generate_look))
        app.add_handler(CommandHandler("random", random_look))
        app.add_handler(CommandHandler("wardrobe", show_wardrobe))
        app.add_handler(CommandHandler("remove", remove_item))
        app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, save_item))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reference))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        app.run_polling()
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
